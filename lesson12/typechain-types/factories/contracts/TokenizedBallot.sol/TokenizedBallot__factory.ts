/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TokenizedBallot,
  TokenizedBallotInterface,
} from "../../../contracts/TokenizedBallot.sol/TokenizedBallot";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proposalNames",
        type: "bytes32[]",
      },
      {
        internalType: "contract ITokenizedVotes",
        name: "_tokenContract",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_referenceBlock",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "proposals",
    outputs: [
      {
        internalType: "bytes32",
        name: "name",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "voteCount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "referenceBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenContract",
    outputs: [
      {
        internalType: "contract ITokenizedVotes",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposal",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "votePower",
    outputs: [
      {
        internalType: "uint256",
        name: "votePower_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "votePowerSpent",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winnerName",
    outputs: [
      {
        internalType: "bytes32",
        name: "winnerName_",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "winningProposal",
    outputs: [
      {
        internalType: "uint256",
        name: "winningProposal_",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000e4938038062000e49833981810160405281019062000037919062000398565b60005b8351811015620000ce576002604051806040016040528086848151811062000067576200006662000413565b5b6020026020010151815260200160008152509080600181540180825580915050600190039060005260206000209060020201600090919091909150600082015181600001556020820151816001015550508080620000c59062000471565b9150506200003a565b5081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600081905550505050620004be565b6000604051905090565b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001848262000139565b810181811067ffffffffffffffff82111715620001a657620001a56200014a565b5b80604052505050565b6000620001bb62000120565b9050620001c9828262000179565b919050565b600067ffffffffffffffff821115620001ec57620001eb6200014a565b5b602082029050602081019050919050565b600080fd5b6000819050919050565b620002178162000202565b81146200022357600080fd5b50565b60008151905062000237816200020c565b92915050565b6000620002546200024e84620001ce565b620001af565b905080838252602082019050602084028301858111156200027a5762000279620001fd565b5b835b81811015620002a7578062000292888262000226565b8452602084019350506020810190506200027c565b5050509392505050565b600082601f830112620002c957620002c862000134565b5b8151620002db8482602086016200023d565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200031182620002e4565b9050919050565b6000620003258262000304565b9050919050565b620003378162000318565b81146200034357600080fd5b50565b60008151905062000357816200032c565b92915050565b6000819050919050565b62000372816200035d565b81146200037e57600080fd5b50565b600081519050620003928162000367565b92915050565b600080600060608486031215620003b457620003b36200012a565b5b600084015167ffffffffffffffff811115620003d557620003d46200012f565b5b620003e386828701620002b1565b9350506020620003f68682870162000346565b9250506040620004098682870162000381565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006200047e826200035d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203620004b357620004b262000442565b5b600182019050919050565b61097b80620004ce6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063b384abef1161005b578063b384abef1461012a578063d94c8caa14610146578063e2ba53f014610164578063e490e6991461018257610088565b8063013cf08b1461008d57806355a373d6146100be578063609ff1bd146100dc5780639e90d0d9146100fa575b600080fd5b6100a760048036038101906100a291906104fb565b6101b2565b6040516100b5929190610550565b60405180910390f35b6100c66101e6565b6040516100d391906105f8565b60405180910390f35b6100e461020c565b6040516100f19190610613565b60405180910390f35b610114600480360381019061010f919061066c565b610294565b6040516101219190610613565b60405180910390f35b610144600480360381019061013f9190610699565b6102ac565b005b61014e610393565b60405161015b9190610613565b60405180910390f35b61016c610399565b60405161017991906106d9565b60405180910390f35b61019c6004803603810190610197919061066c565b6103cd565b6040516101a99190610613565b60405180910390f35b600281815481106101c257600080fd5b90600052602060002090600202016000915090508060000154908060010154905082565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000905060005b60028054905081101561028f578160028281548110610238576102376106f4565b5b906000526020600020906002020160010154111561027c5760028181548110610264576102636106f4565b5b90600052602060002090600202016001015491508092505b808061028790610752565b915050610216565b505090565b60036020528060005260406000206000915090505481565b60006102b7336103cd565b9050818110156102fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102f390610843565b60405180910390fd5b81600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461034b9190610863565b925050819055508160028481548110610367576103666106f4565b5b906000526020600020906002020160010160008282546103879190610863565b92505081905550505050565b60005481565b600060026103a561020c565b815481106103b6576103b56106f4565b5b906000526020600020906002020160000154905090565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633a46b1a8846000546040518363ffffffff1660e01b815260040161046e9291906108a6565b602060405180830381865afa15801561048b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104af91906108e4565b6104b99190610911565b9050919050565b600080fd5b6000819050919050565b6104d8816104c5565b81146104e357600080fd5b50565b6000813590506104f5816104cf565b92915050565b600060208284031215610511576105106104c0565b5b600061051f848285016104e6565b91505092915050565b6000819050919050565b61053b81610528565b82525050565b61054a816104c5565b82525050565b60006040820190506105656000830185610532565b6105726020830184610541565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006105be6105b96105b484610579565b610599565b610579565b9050919050565b60006105d0826105a3565b9050919050565b60006105e2826105c5565b9050919050565b6105f2816105d7565b82525050565b600060208201905061060d60008301846105e9565b92915050565b60006020820190506106286000830184610541565b92915050565b600061063982610579565b9050919050565b6106498161062e565b811461065457600080fd5b50565b60008135905061066681610640565b92915050565b600060208284031215610682576106816104c0565b5b600061069084828501610657565b91505092915050565b600080604083850312156106b0576106af6104c0565b5b60006106be858286016104e6565b92505060206106cf858286016104e6565b9150509250929050565b60006020820190506106ee6000830184610532565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061075d826104c5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361078f5761078e610723565b5b600182019050919050565b600082825260208201905092915050565b7f546f6b656e697a656442616c6c6f743a20547279696e6720746f20766f74652060008201527f77697468206d6f7265207468616e2074686520766f74696e6720706f7765722060208201527f617661696c61626c6520666f722074686973206163636f756e742e0000000000604082015250565b600061082d605b8361079a565b9150610838826107ab565b606082019050919050565b6000602082019050818103600083015261085c81610820565b9050919050565b600061086e826104c5565b9150610879836104c5565b925082820190508082111561089157610890610723565b5b92915050565b6108a08161062e565b82525050565b60006040820190506108bb6000830185610897565b6108c86020830184610541565b9392505050565b6000815190506108de816104cf565b92915050565b6000602082840312156108fa576108f96104c0565b5b6000610908848285016108cf565b91505092915050565b600061091c826104c5565b9150610927836104c5565b925082820390508181111561093f5761093e610723565b5b9291505056fea26469706673582212207d3636ec4b9c879830dbcf58044bfbc29640b5cc4e6105711a5e25d939cb3fbb64736f6c63430008110033";

type TokenizedBallotConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenizedBallotConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenizedBallot__factory extends ContractFactory {
  constructor(...args: TokenizedBallotConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    proposalNames: PromiseOrValue<BytesLike>[],
    _tokenContract: PromiseOrValue<string>,
    _referenceBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TokenizedBallot> {
    return super.deploy(
      proposalNames,
      _tokenContract,
      _referenceBlock,
      overrides || {}
    ) as Promise<TokenizedBallot>;
  }
  override getDeployTransaction(
    proposalNames: PromiseOrValue<BytesLike>[],
    _tokenContract: PromiseOrValue<string>,
    _referenceBlock: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      proposalNames,
      _tokenContract,
      _referenceBlock,
      overrides || {}
    );
  }
  override attach(address: string): TokenizedBallot {
    return super.attach(address) as TokenizedBallot;
  }
  override connect(signer: Signer): TokenizedBallot__factory {
    return super.connect(signer) as TokenizedBallot__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenizedBallotInterface {
    return new utils.Interface(_abi) as TokenizedBallotInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TokenizedBallot {
    return new Contract(address, _abi, signerOrProvider) as TokenizedBallot;
  }
}
